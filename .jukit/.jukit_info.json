{"cmd": "#Question 4\n# importing Qiskit\nfrom qiskit import IBMQ, Aer\n#from qiskit.providers.ibmq import least_busy\nfrom qiskit import QuantumCircuit, transpile\nfrom qiskit_textbook.problems import dj_problem_oracle\n# import basic plot tools\nfrom qiskit.visualization import plot_histogram\n\nbalanced_oracle = QuantumCircuit(n+1)\noracle = dj_problem_oracle(1)\nb_str = \"101\"\n\n# Place X-gates\nfor qubit in range(len(b_str)):\n    if b_str[qubit] == '1':\n        balanced_oracle.x(qubit)\n\n# Use barrier as divider\nbalanced_oracle.barrier()\n\n# Controlled-NOT gates\nfor qubit in range(n):\n    balanced_oracle.cx(qubit, n)\n\nbalanced_oracle.barrier()\n\n# Place X-gates\nfor qubit in range(len(b_str)):\n    if b_str[qubit] == '1':\n        balanced_oracle.x(qubit)\n\n# Show oracle\nbalanced_oracle.draw()\n\ndj_circuit = QuantumCircuit(n+1, n)\n\n# Apply H-gates\nfor qubit in range(n):\n    dj_circuit.h(qubit)\n\n# Put qubit in state |->\ndj_circuit.x(n)\ndj_circuit.h(n)\n\n# Add oracle\ndj_circuit = dj_circuit.compose(balanced_oracle)\n\n# Repeat H-gates\nfor qubit in range(n):\n    dj_circuit.h(qubit)\ndj_circuit.barrier()\n\n# Measure\nfor i in range(n):\n    dj_circuit.measure(i, i)\n# Display circuit\ndj_circuit.draw('mpl')\n", "cmd_opts": "", "import_complete": 1, "terminal": "kitty"}